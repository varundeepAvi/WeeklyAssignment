# -*- coding: utf-8 -*-
"""weeklyAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RFA6lZVUo_nHYEJLDrkmfNA2bBqVXNG8
"""

import sys
import os

class Student:

    students_list = [ ]

    min_threshold =  33
    max_threshold =  80
    category_list = { }

    category_list[1] =   list1 = []
    category_list[2] =   list2 = []
    category_list[3] =   list3 = []









    def __init__(self):

        self.name =  self.get_valid_input("Enter Student Name :     ",str,condition = self.is_alphabetic)
        if self.name  is None :
         sys.exit()

        self.roll_no = self.get_valid_input("Enter Student Roll No:   " ,int, lambda x : x > 0 )

        if self.roll_no is None :
          sys.exit()

        self.age =  self.get_valid_input("Enter Student Age :      ", int, lambda x : x > 0)

        if self.age is  None :
          sys.exit()
        self.marks_list= []
        Student.students_list.append(self)



    def get_valid_input(self, prompt, data_type, condition=None):
     i = 0
     while i < 2:
        user_input = input(prompt)

        try:
            converted_input = data_type(user_input)
            if condition is None or condition(converted_input):
                return converted_input
            else:
                print("Input does not meet the specified condition. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid value.")
        i +=1

     if i ==2 :
       print("Try Next time , ")
       return None



    def is_alphabetic(self, value):
     return value.isalpha()


    def addMarks(self):

      for subject in range(1,6):
           marks = self.get_valid_input(f"Enter marks of Sub{subject}      ", int, lambda x : x >=0 and x <=100)
           self.marks_list.append(marks)




      sum = 0
      fail = False
      for item in self.marks_list:
               if item < 33:
                  fail = True


               sum += item


      self.avg = sum // len( self.marks_list)

      if self.avg >=  80 and  not fail :
          self.category = 1
          Student.category_list[self.category].append(self)

      elif self.avg >= 33 and self.avg < 80 and not fail :
          self.category = 2
          Student.category_list[self.category].append(self)

      else :
          self.category =3

          Student.category_list[self.category].append(self)


    def __str__(self):
     return(f"Student Details: \n\
              Name :         {self.name}\n\
              Roll No :      {self.roll_no}\n\
              average Marks :{self.avg}\n\
              age :          {self.age} ")




def addStudent() :
    s1 = Student()
    s1.addMarks()

def clearScreen() :
    os.system('cls')

def getStudents():

  l = len(Student.students_list)
  if l == 0 :
    print("Currently , No student is enrolled. Firstly add a student")
    return

  print("Students enrolled are :- ")
  for item in Student.students_list:
      print(item)

def getTopFiveToppers():


     qualified_students= [student for student  in Student.students_list  if student.marks_list[0] >= Student.min_threshold and student.marks_list[1] >= Student.min_threshold and student.marks_list[2] >= Student.min_threshold  and student.marks_list[3] >= Student.min_threshold  and student.marks_list[4] >= Student.min_threshold ]

     toppers = sorted(qualified_students, key = lambda x: x.avg, reverse = True)[:5]
     #new_sorted_list= sorted(Student.students_list, key = lambda x: x.avg, reverse = True)
     l = len(toppers)
     stu_count = len(Student.students_list)
     if stu_count ==0:
       print("Currently , No student is enrolled. Firstly add a student")
       return

     elif l ==0 :
       print("Currently, No student has fulfilled the criteria of minimum Threshold Marks to pass")

     else :
      print(" Toppres of students are :-")
      for i  in range(5) :
       if i == 0 and  i < l :
        print(toppers[i])
        print("Above Student is Topper of class ,so he/she deserves  a Special gift ")
        print()

       elif i < l:
         print(toppers[i])




def getPersonalAttentionReqStudents():

     stu_count = len(Student.students_list)
     l= len(Student.category_list[3])
     if stu_count ==0:
       print("Currently , No student is enrolled. Firstly add a student")
       return

     elif l ==0 :
       print("Currently, No student  who requires Personal Attentions, ")


     else:
      print("Students who requires Personal attention are :-")

     for item in Student.category_list[3]:
       print(item)


def toTerminate():
    sys.exit()


while True:

  print("Press 1 to add New Student")
  print("Press 2 to see list of students enrolled")
  print("Press 3 to see list of first 5 toppers of class")
  print("Press 4 to see list of students who require Personal Attention")
  print("Press 5 to Exit")

  print()
  value = int(input())


  match  value:
    case 1:
      addStudent()
      clearScreen()
    case 2:
        getStudents()
        clearScreen()

    case 3:
       getTopFiveToppers()
       clearScreen()

    case 4:
      getPersonalAttentionReqStudents()
      clearScreen()

    case 5:
      toTerminate()
      clearScreen()


  print()
  print()
  print()
  print()

